<?xml version="1.0" encoding="utf-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='cs'>
<head>
<title>OpenGL (11.) - Nová detekce kolizí</title>
<meta http-equiv="content-Type" content="text/html; charset=utf-8"/>
<meta http-equiv="content-language" content="cs"/>
<meta name="description" content="O detekci kolizí již bylo na různých serverech popsáno mnoho stránek. Pro detekci v opravdovém prostoru a ne jen v místnostech tvořených krychlemi se ale hodí jen málo ze všech možných... Já jsem se rozhodl pro vylepšení z toho důvodu, že jsem na anglickém internetu našel řešení, které je sice podobné mému původnímu, avšak je rychlejší a přesnější..."/>
<meta name="Author" content="Roman Schulz, rschulz@centrum.cz"/>
<meta name="robots" content="index,follow"/>
<meta name="Copyright" content="(C) 2005 Roman Schulz, All rights reserved."/>
<link href="index.php?zobraz=articles&amp;rss=10" rel="alternate" type="application/xml" title="rss články"/>
<link href="index.php?zobraz=blog&amp;rss=10" rel="alternate" type="application/xml" title="rss blog"/>
<link href="index.php?zobraz=discussion&amp;rss=30" rel="alternate" type="application/xml" title="rss komentáře"/>
<link rel="stylesheet" href="/skin/new/styl.css" type="text/css"/>
</head>


<body>
<div id="web">
<div id="celek">
  <div id="top">
    <img src="/skin/new/img/top1.jpg" alt="" width="800" height="115" /> 
		<div id="nadpis"><a href="http://www.pc-guru.cz">PC-guru.cz</a></div>
  </div>
  <div class="menuh">
		<a class="buttonh" href="kontakni-informace">Kontaktní informace</a><a class="buttonh" href="inzerce">Výměna odkazů</a><a class="buttonh" href="historie-serveru">Historie</a>  </div>
  
  <div id="obal">
    <div class="text">
<script type="text/javascript"><!--
google_ad_client = "pub-8453529582371782";
google_alternate_color = "FFFFFF";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
//2007-05-24: top
google_ad_channel = "4038297255";
google_color_border = "FFFFFF";
google_color_bg = "FFFFFF";
google_color_link = "4F4F8B";
google_color_text = "000000";
google_color_url = "CCCCF4";
//-->
</script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script><a href="http://linkuj.cz/?id=linkuj&amp;url=http://www.pc-guru.cz/detekce-kolizi-ve-3d&amp;title=OpenGL (11.) - Nová detekce kolizí" rel="nofollow"><img style="float: right;" src="http://linkuj.cz/img/badge.png" alt="Dejte tomuto článku hlas!" title="Dejte tomuto článku hlas!"/></a><h1>OpenGL (11.) - Nová detekce kolizí</h1><i>O detekci kolizí již bylo na různých serverech popsáno mnoho stránek. Pro detekci v opravdovém prostoru a ne jen v místnostech tvořených krychlemi se ale hodí jen málo ze všech možných... Já jsem se rozhodl pro vylepšení z toho důvodu, že jsem na anglickém internetu našel řešení, které je sice podobné mému původnímu, avšak je rychlejší a přesnější...</i><br/><hr/><br/><p>Zdroják jsem využil (jako obvykle !!?!) ten zminulého článku. Pro lepší věrohodnost scény jsem všechny textury překreslil na rozlišení 512x512 místo původních 256x256. Myslím, že výsledek je doopravdy znát. Také jsem použil novou knihovnu geometry.pas s podporou funkcí 3DNow!, o které jsem psal někdy minulý týden a také je přibalená k dnešnímu zdrojovému souboru. V čem spočívaí změny oproti minulému tutoriálu?</p>

<center><table class="image" cellpadding="0" cellspacing="0"><tr><td><img src="articles/glkolize2/glkolize21.jpg" alt=""/></td></tr></table></center>

<p>1) Testuje se, jestli nedošlo ke kolizi někde mezi bodem, ze kterého vycházíme a cílovým bodem. Teprve když jsme si jisti, že  se mezi těmito body nenachází nějaký trojúhelík, pak změníme pozici kamery. Tohle je velmi důležitá změna, protože doposud jsme testovali jediný bod, který "kolidoval" se stěnou pouze, když se dostal přesně mezi všechny tři body trojúhelníka. To ale přinášelo hazardní stavy, kdy jsme přemístili kameru např. o 0,001 jednotky. Před posunem kamera byla před testovaným trojúhelníkem a po posunu se ocitla až za tímto trojúhelníkem, takže kolizi jsme nemohli nikdy bez určitého zaokrouhlování vyhodnotit.</p>

<p>2) Využití instrukcí 3DNow!, pro Intelácké procesory se nic nemění.</p>

<p>3) Díky změně způsobu výpočtu nemůžeme využít ořezávání scény tak, jak jsem ji popsal v jednom z minulých tutoriálů - Můžete se ale těšit na dokonalejší.</p>

<p>Začněme tedy s popisem. Pokud již máte svůj funkční 3D engine, ale můžete procházet zkrze zdi a jiné předměty, je pravá chvíle pustit se do vyhodnocení detekce kolizí. Předpokládejme, že bod, ve kterém je kamera, označíme pozice a bod, kam kameru posuneme, označíme za cíl.Ke zjištění kolizí potřebujeme vykonat následující: Musíme zjistit pro každý trojúhelník ve scéně, jestli pozice a cíl leží na jedné straně prostoru rozděleného rovinou tvořenou plochou trojúhelníka. K tomu nám poslouží tato funkce:</p>
<pre><b>function</b> VyhodnotitBod(A, Normal, Position: TAffineVector):boolean;
<b>var</b> t:TGLFloat;
<b>begin</b>
t := VectorDotProduct(Normal,Position) - VectorDotProduct(Normal,A);
<b>if</b> (t>0) <b>then</b> result:=1
  <b>else if</b> (t&lt;0) <b>then</b> result:=2
    <b>else</b> result:=0;
<b>end;</b></pre>

<p>Do funkce dosadíme jeden bod trojúhelníka, normálový vektor trojúhelníka a testovanou pozici. V našem případě vrací fce číslo integer, podle kterého poznáme stranu roviny tvořenou body trojúhelníka. Je-li výsledná hodnota rovna 1, pak je testovaná pozice nad rovinou tvořenou trojúhelníkem, je-li výsledná hodnota rovna 2, pak je pozice pod rovinou tvořenou body trojúhelníka a je-li výsledná hodnota rovna 0, pak je pozice kamery umístěna přesně uvnitř roviny testovaného trojúhelníka (=kolize s rovinou trojúhelníka). Je-li výsledná hodnota funkce různá pro pozici kamery a cíl kamery, pak je zřejmé, že kamera prošla zkrz rovinu (=kolize s rovinou trojúhelníka).</p>
"
<center><table class="image" cellpadding="0" cellspacing="0"><tr><td><img src="articles/glkolize2/glkolize22.jpg" alt=""/></td></tr></table></center>

<pre>//Postupne pro vsechny trojuhelniky zjisti kolize
<b>for</b> count := 1 <b>to</b> MaxTriangles <b>do begin</b>
  //Nacte vrcholy testovaneho trojuhelnika
  A := VertexPointer[count][0];
  B := VertexPointer[count][1];
  C := VertexPointer[count][2];
  
  //Vektory roviny
  VectA := AffineVectorMake(A.x-B.x,A.y-B.y,A.z-C.z);
  VectB := AffineVectorMake(B.x-C.x,B.y-C.y,B.z-C.z);
  
  //Vypocet normaloveho vektoru roviny trojuhelnika
  Normal := VectorCrossProduct(VectA,VectB);

  //Bod nalezici
  Bod[0] := A.x;
  Bod[1] := A.y;
  Bod[2] := A.z;
  
  //Puvodni pozice kamery
  position[0] := -Objekt[0].oldX;
  position[1] := -Objekt[0].oldY-3;
  position[2] := -Objekt[0].oldZ;

  <b>repeat</b>
    kolize:=false;
	
    //Nova pozice kamery
    destination[0] := -Objekt[0].X;
    destination[1] := -Objekt[0].Y-3;
    destination[2] := -Objekt[0].Z;
 
   ....
  
  <b>until</b> (kolize = false);
<b>end;</b></pre> 
  
  
  

<p>Je zřejmé, že pro každý trojúhelník můžete spustit funkci VyhodnotitBod nejprve s pozicí kamery a poté s cílem kamery. Liší-li se výstupní hodnota fce, pak jsme prošli zkrz rovinu. To ale neznamená, že jsme prošli trojúhelníkem, proto budeme testovat dále:</p>

<pre>
    <b>if</b> Vyhodnotitbod(Bod,Normal,position) &gt;&lt;
             Vyhodnotitbod(Bod,Normal,destination) <b>then</b>
    <b>begin</b>
     ...
    <b>end;</b></pre>
	
<p>Teď vypočítáme průsečík roviny a přímky tvořené pozicí a cílem:</p>
<pre>      ray[0] := destination[0]-position[0];
      ray[1] := destination[1]-position[1];
      ray[2] := destination[2]-position[2];

      distance := VectorDotProduct(Normal,bod);
      dotproduct := VectorDotProduct(Normal,Ray);

      <b>if</b> dotproduct&lt;&gt;0 <b>then begin</b>
        t:=(distance-VectorDotProduct(Normal,Position))/dotproduct;
        intersection[0] := Position[0] + (ray[0] * t);
        intersection[1] := Position[1] + (ray[1] * t);
        intersection[2] := Position[2] + (ray[2] * t);
      <b>end
      else begin</b>
        intersection[0] := destination[0];
        intersection[1] := destination[1];
        intersection[2] := destination[2];
      <b>end;</b></pre>

	  
<p>vektor ray udává směrový vektor přímky. Je-li proměnná DotProduct rovna nule, znamená to že směrový vektor přímky je rovnoběžný s rovinou, proto průsečík neexistuje. Z tohoto důvodu jsem do proměnné intersection (průsečík) dosadil cíl. Teď můžeme pokračovat podle původního způsobu detekce kolizí. Máme totiž všechny tři body trojúhelníka a průsečík, který leží na rovině dané těmito body.</p>
<pre>      //Zjisti vzdalenost bodu trojuhelnika navzajem
      AB := SQRT(SQR(A.x-B.x)+SQR(A.y-B.y)+SQR(A.z-B.z));
      AC := SQRT(SQR(A.x-C.x)+SQR(A.y-C.y)+SQR(A.z-C.z));
      BC := SQRT(SQR(B.x-C.x)+SQR(B.y-C.y)+SQR(B.z-C.z));
	  
      //Zjisti vzdalenost bodu trojuhelnika a kamery
      Akamera:=SQRT(SQR(A.x-intersection[0])+SQR(A.y-destination[1])
          + SQR(A.z-intersection[2]));
      Bkamera:=SQRT(SQR(B.x-intersection[0])+SQR(B.y-destination[1])
          + SQR(B.z-intersection[2]));
      Ckamera:=SQRT(SQR(C.x-intersection[0])+SQR(C.y-destination[1])
          + SQR(C.z-intersection[2]));
	  
      //Uhel mezi kamerou a dvema body trojuhelnika
      if NOT(Akamera=0) AND NOT(Bkamera=0) AND NOT(Ckamera=0) then begin
      th[1] := arccos ((-AB*AB + Akamera*Akamera 
          + Bkamera*Bkamera) / (2*Akamera*Bkamera));
      th[2] := arccos ((-AC*AC + Akamera*Akamera 
          + Ckamera*Ckamera) / (2*Akamera*Ckamera));
      th[3] := arccos ((-BC*BC + Bkamera*Bkamera 
          + Ckamera*Ckamera) / (2*Bkamera*Ckamera));
      end;
	  
      //Secte uhly mezi kamerou a stenami trojuhelnika
      th[0]:=th[1]+th[2]+th[3];

      //Je-li kamera mazi vrcholy trojuhelnika (kolize)
	  // pak soucet uhlu je roven 360 (2pi)
      <b>if</b> th[0] > 2.0 <b>then</b>
      <b>begin</b>
        //Je-li kolize, zvysi se y-ova hodnota
		Objekt[0].Y:=Objekt[0].Y-0.1;
        Objekt[0].VolnyPad:=0;
        Objekt[0].jumpdisable:=false;
        kolize:=true;
      <b>end else</b> kolize:=false;</pre>

<p>Zkrátka zjistíme vzdálenosti mezi body trojúhelníka navzájem a vzdálenosti mezi body trojúhelníka a cílem kamery. Z těchto hodnot vypočteme pomocí kosinovy věty úhel a je li součet úhlů vyšší nebo roven 360&deg; ( 2&pi; ), pak je průsečík doopravdy uvnitř trojúhelníku a tudíž jsme trojúhelníkem prošli. Teď je třeba nějak tomuto stavu zamezit. Já jsem toho docílil tak, že jsem vzal pozici kamery a přičetl jsem poměrně malou hodnotu k ose y a toto se opakuje tak dlouho, až přestane být kolize mezi testovaným trojúhelníkem a kamerou. Přičtení určité hodnoty k y=ové souřadnici je podle mě zvlášť výhodné právě při renderování krajiny. Pokud bychom měli např. pravoúhlou místnost, bylo by vhodné při kolizi dosazovat buď původní pozici kamery, nebo pozici, která je dána průsečíkem s rovinou, ke kterému přičteme odražený směrový vektor. Toto vše se musí udělat pro všechny trojúhelníky ve scéně, výhoda je ale ta, že hned na začátku většinu trojúhelníků vyloučíme, protože jsme jejich rovinu vůbec neprotnuly...</p>


<center><table class="image" cellpadding="0" cellspacing="0"><tr><td><img src="articles/glkolize2/glkolize23.jpg" alt=""/></td></tr></table></center>
	

<p>Pokud jste někdo nepochopili můj výklad, můžete se podívat na myšlenku autora na serveru <a class="odkaz" href="http://www.flipcode.com"><b>www.flipcode.com</b></a> na článek s názvem <a href="http://www.flipcode.com/tutorials/tut_collisiton.shtml"><b>Basic Collision Detection</b></a>, nebo na podobný článek na serveru <a href="http://nehe.gamedev.net"><b>NeHe tutorials</b></a> s názvem <a href="http://nehe.gamedev.net/tutorials/lesson31.asp"><b>Collision Detection</b></a>. Další příklady detekce kolizí jsou na adresách <a href="http://www.gamasutra.com"><b>www.gamasutra.com</b></a>, <a href="http://www.gamedev.net"><b>www.gamedev.net</b></a>, nebo na českém webu <a href="http://koci.opengl.cz"><b>Jan Kočí Software</b></a>. <a href="articles/glkolize2/glkolize2.zip"><b>Tady</b></a> (290 kB) si můžete dnešní stáhnout zdroják i s texturami.</p><br/><script type="text/javascript"><!--
google_ad_client = "pub-8453529582371782";
google_alternate_color = "FFFFFF";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "text";
//2007-07-08: bottom
google_ad_channel = "1008048823";
google_color_border = "FFFFFF";
google_color_bg = "FFFFFF";
google_color_link = "4F4F8B";
google_color_text = "000000";
google_color_url = "CCCCF4";
//-->
</script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script><p>Děkuji, že jste se rozhodl(a) přečíst tento článek. Budu rád i za komentář. Pokud Vás tento článek
zaujal a rádi byste jej doporučili ostatním, podpořte mně prosím tím, že věnujete minutku svého času a uděláte mi reklamu na linkuj.cz, vybrali.sme.sk či jagg.cz. Přeji příjemné čtení</p><h2>Poslední články</h2><ul style="margin-left: 20px"><li><a href="matematicka-knihovna-geometry-pas-delphi">OpenGL (10.) - Nová knihovna geometry.pas</a></li><li><a href="generovani-textur-terenu-a-far-clip">OpenGL (9.) - Generování textur a vylepšení FarClip Distance</a></li><li><a href="export-do-gif">Zoner Callisto (1.) - Export do GIFu</a></li><li><a href="3d-studio-max-odlesky-na-vodni-hladine">3D Studio MAX (9.) - Vytváření odlesků vodní hladiny</a></li><li><a href="slovnik-pojmu-opengl">OpenGL (8.) - Slovníček pojmů v OpenGL</a></li><li><a href="detekce-kolizi-v-opengl-nacteni-textury-jpg">OpenGL (7.) - Detekce kolizí, načtení mapy a textury v jpg souboru</a></li><li><a href="co-je-to-minigl">OpenGL (6.) - Co je to MiniGL</a></li><li><a href="opengl-vertex-array-gldrawelements">OpenGL (5.) - Urychlení pomocí glDrawElements</a></li><li><a href="system-speaker-a-destrukce-souboru">Delphi (7.) - Syst. repro a autodestrukce souboru</a></li><li><a href="opengl-fullscreen">OpenGL (4.) - FullScreen</a></li><li><a href="3d-studio-max-horici-zapalka-ohen">3D Studio MAX (8.) - Tvorba hořící zápalky</a></li><li><a href="techniky-zobrazeni-3d-doom">'DOOM' 3D Engine techniques</a></li><li><a href="pohyb-ve-3d-scene">OpenGL (3.) - Procházení scénou</a></li><li><a href="3d-studio-max-3d-text">3D Studio MAX (7.) - 3D text</a></li><li><a href="3d-studio-max-dym-smoke">3D Studio MAX (6.) - Vznášející se dým</a></li><li><a href="adobe-photoshop-textura-vodni-hladiny">Adobe Photoshop (3.) - Textura vodní hladiny</a></li><li><a href="grafika-a-zvuky-v-delphi">Delphi (6.) - Grafika a zvuky</a></li><li><a href="zajimave-zdrojaky-pro-delphi-2">Delphi (5.) - Zajímavé zdrojáky 2.</a></li><li><a href="3d-studio-max-mlha-fog">3D Studio MAX (5.) - Přízemní mlha ve 3D Studiu MAX</a></li><li><a href="adobe-photoshop-hvezdna-obloha-deep-stars">Photoshop tutoriály (2.) - Temná hvězdná obloha</a></li><li><a href="opengl-ctverec-s-texturou">OpenGL (2.) - Čtverec s texturou</a></li><li><a href="nastaveni-opengl-zobrazeni-barevneho-ctverce">OpenGL (1.) - Čtverec s interpolací barvy</a></li><li><a href="3d-studio-max-laser">3D Studio MAX (4.) - Jak vytvořit jednoduchý laser</a></li><li><a href="3d-studio-max-tvorba-krajiny-landscape">3D Studio MAX (3.) - Tvorba 3D krajiny</a></li><li><a href="zajimave-zdrojaky-pro-delphi-1">Delphi (4.) - Zajímavé zdrojáky</a></li></ul><h2>Diskuse ke článku</h2><a id="disc"></a>Zatím nikdo nevložil komentář. Chcete být první?<br/><a href="index.php?zobraz=discussion&amp;add=1&amp;type=1&amp;subtype=8&amp;url=%2Fdetekce-kolizi-ve-3d" rel="nofollow">Přidání příspěvku </a>    </div>
    <div class="menuv">
		<span class="nadpisv">Hlavní menu</span>
		<a href="/" class="buttonv">Blog</a>
		<a href="index.php?zobraz=ankety" class="buttonv">Ankety</a>
		<a href="index.php?zobraz=articles" class="buttonv">Články</a>

		<span class="nadpisv">Články</span>
		<a class="buttonv" href="programovani">Programování</a><a class="buttonv" href="grafika-2d-3d">Grafika</a>
		<span class="nadpisv">Tip</span>
		<a class="buttonv" href="index.php?zobraz=blog&amp;rss=10">RSS - Blog</a>
		<a class="buttonv" href="index.php?zobraz=articles&amp;rss=10">RSS - Články</a>
		<a class="buttonv" href="index.php?zobraz=discussion&amp;rss=30">RSS - Komentáře</a>
		<a href="index.php?zobraz=search" class="buttonv">Hledej na pc-guru.cz</a>
     
		<div style="margin-left: 5px">   
<br/><script type="text/javascript"><!--
google_ad_client = "pub-8453529582371782";
google_ad_width = 120;
google_ad_height = 90;
google_ad_format = "120x90_0ads_al_s";
//2007-07-07: adsense left
google_ad_channel = "1408597348";
google_color_border = "9C9CE8";
google_color_bg = "9C9CE8";
google_color_link = "4F4F8B";
google_color_text = "000000";
google_color_url = "CCCCF4";
//-->
</script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
		
				<span class="nadpisv">Anketa: Jak trávíte léto?</span><a class="buttonv" href="jak-travite-leto?vote=1" rel="nofollow">Pracovně&nbsp;</a><div class="ank_box_count" style="width: 45.6532029843px;">&nbsp;</div><a class="buttonv" href="jak-travite-leto?vote=2" rel="nofollow">Budu cestovat&nbsp;</a><div class="ank_box_count" style="width: 122px;">&nbsp;</div><a class="buttonv" href="jak-travite-leto?vote=3" rel="nofollow">Budu grilovat&nbsp;</a><div class="ank_box_count" style="width: 45.7149472601px;">&nbsp;</div><a class="buttonv" href="jak-travite-leto?vote=4" rel="nofollow">U piva&nbsp;</a><div class="ank_box_count" style="width: 62.0154360689px;">&nbsp;</div><a class="buttonv" href="jak-travite-leto?vote=5" rel="nofollow">Spát s holkama/klukama&nbsp;</a><div class="ank_box_count" style="width: 47.1659377412px;">&nbsp;</div><a class="buttonv" href="jak-travite-leto?vote=6" rel="nofollow">Festivaly&nbsp;</a><div class="ank_box_count" style="width: 35.3419089272px;">&nbsp;</div><a class="buttonv" href="jak-travite-leto?vote=7" rel="nofollow">Nic z uvedeného&nbsp;</a><div class="ank_box_count" style="width: 46.6719835349px;">&nbsp;</div>12651 hlasů, <a class="box_ank_prisp" href="jak-travite-leto#disc">10 příspěvků</a>
<span class="nadpisv">Počítadlo</span><div style="text-align: center;"><script type="text/javascript"><!--
document.write ('<img src="http://toplist.cz/count.asp?id=28945&amp;logo=mc&amp;http='+escape(document.referrer)+'&amp;wi='+escape(window.screen.width)+'&amp;he='+escape(window.screen.height)+'&amp;cd='+escape(window.screen.colorDepth)+'&amp;t='+escape(document.title)+'" width="88" height="60" alt="TOPlist" />');
//--></script><noscript><div><img src="http://toplist.cz/count.asp?id=28945&amp;logo=bc" alt="TOPlist" width="88" height="60" /></div></noscript></div>    </div>
  </div>
  <!--<div class="novinky">
 	< ?ShowNewsBox($limit = 5);?>
  </div>-->  
</div>
  <div class="paticka"> <strong>&copy;PC-guru.cz 2000-2007</strong> | Optimalizováno pro 1024*768 </div>
</div>

</body>
</html>
