<?xml version="1.0" encoding="ISO-8859-2"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="cs" lang="CS">
<head>

<meta http-equiv="content-type" content="text/html; charset=ISO-8859-2" />
<meta http-equiv="content-language" content="cs" />
<meta http-equiv="content-script-type" content="text/javascript" />
<meta http-equiv="content-style-type" content="text/css" />

<meta name="robots" content="all, follow" />
<meta name="resource-type" content="document" />

<meta name="description" content="NeHe OpenGL Tutoriály v èe¹tinì, programování 3D grafiky, èlánky, programy se zdrojovými kódy..." />
<meta name="keywords" content="opengl, nehe, tutoriály, woq, programování, 3D" />
<meta name="author" content="all: Michal Turek - Woq; woq (zavináè) seznam.cz" />
<meta name="copyright" content="Copyright (c) 2002, 2003, 2004 Michal Turek - Woq" />

<title>CZ NeHe OpenGL - Lekce 19 - Èásticové systémy</title>

<link rel="shortcut icon" href="skin/default/web.ico" type="image/x-icon" />
<link href="skin/default.css" rel="stylesheet" type="text/css" media="all" />
<link href="skin/print.css" rel="stylesheet" type="text/css" media="print" />

</head>

<body>

<!-- Levý sloupec -->
<div class="levy">
<div id="main_menu">
<a href="http://nehe.ceske-hry.cz/"><img src="skin/default/web_logo.gif" width="135" height="135" style="margin-left: 5px;" alt="CZ NeHe OpenGL" /></a>

<div class="main_menu_bez_loga">

<ul class="text_main_menu">
<li><a href="my.php" title="Pøekladatelé NeHe Tutoriálù a autoøi èlánkù">My</a></li>
<li><a href="novinky.php" title="Co je nového">Novinky</a></li>
<li><a href="navigacni_mapa.php" title="Pøehledná navigace na jednotlivé stránky, které dohromady tvoøí tento web">Navigaèní mapa</a></li>
<li><a href="kontakt.php" title="Kontakt na správce tohoto webu">Kontakt</a></li>
<li><a href="http://forum.programovani.com/" title="Diskusní fórum">Fórum</a></li>
</ul>

<ul class="text_main_menu">
<li><a href="clanky.php" title="Obsah èlánkù">Èlánky</a></li>
<li><a href="tut_obsah.php" title="Obsah NeHe OpenGL Tutoriálù">NeHe Tutoriály</a></li>
<li><a href="33D_index.php" title="Obsah Free3D (33D) Basecode">33D Basecode</a></li>
<li><a href="programy.php" title="Programy od èeských autorù">Èeské programy</a></li>
<li><a href="cl_gl_zacinam.php" title="Kde zaèít pøi uèení OpenGL">Pomoc, zaèínám</a></li>
<li><a href="odkazy.php" title="Jiné zdroje informací">Odkazy</a></li>
<li><a href="cl_gl_faq.php" title="FAQ: Èasto kladené dotazy">FAQ</a></li>
</ul>

<ul class="text_main_menu">
<li><a href="spoluprace.php" title="Nechcete se podílet na tvorbì tìchto webových stránek?">Spolupráce...?</a></li>
<li><a href="download.php" title="Stahujte">Download</a></li>
<li><a href="skiny.php" title="Nastavte si jiný layout a design stránek">Skiny</a></li>
<li><a href="javascript:window.print();" title="Vytiskne tuto stránku">Tisk</a></li>
</ul>

<ul class="text_main_menu">
<li>
<form action="p_fulltext.php" method="post" onsubmit="if(!this.najit.value || this.najit.value=='výraz ...') { alert('Byl zadán prázdný øetìzec!'); this.najit.focus(); return false; }">
<input type="text" name="najit" size="12" value="výraz ..." onclick="this.value=''" /><br />
<input type="submit" value="Najít" />
</form>
</li>
</ul>

<ul class="text_main_menu">
<li>Online ètenáøù: 2</li>
</ul>

</div>

</div>
</div>
<!-- Levý sloupec (konec) -->

<!-- Pravý sloupec -->
<div class="pravy">
<div id="tut_menu">

<ul class="text_tut_menu">
<li class="li_tut"><a href="tut_00.php" title="Lekce 0 - Pøedmluva k NeHe Tutoriálùm">00</a></li>
<li class="li_tut"><a href="tut_01.php" title="Lekce 1 - Vytvoøení OpenGL okna ve Windows">01</a></li>
<li class="li_tut"><a href="tut_02.php" title="Lekce 2 - Vytváøení trojúhelníkù a ètyøúhelníkù">02</a></li>
<li class="li_tut"><a href="tut_03.php" title="Lekce 3 - Barvy">03</a></li>
<li class="li_tut"><a href="tut_04.php" title="Lekce 4 - Rotace">04</a></li>
<li class="li_tut"><a href="tut_05.php" title="Lekce 5 - Pevné objekty">05</a></li>
<li class="li_tut"><a href="tut_06.php" title="Lekce 6 - Textury">06</a></li>
<li class="li_tut"><a href="tut_07.php" title="Lekce 7 - Texturové filtry, osvìtlení, ovládání pomocí klávesnice">07</a></li>
<li class="li_tut"><a href="tut_08.php" title="Lekce 8 - Blending">08</a></li>
<li class="li_tut"><a href="tut_09.php" title="Lekce 9 - Pohyb bitmap ve 3D prostoru">09</a></li>
<li class="li_tut"><a href="tut_10.php" title="Lekce 10 - Vytvoøení 3D svìta a pohyb v nìm">10</a></li>
<li class="li_tut"><a href="tut_11.php" title="Lekce 11 - Efekt vlnící se vlajky">11</a></li>
<li class="li_tut"><a href="tut_12.php" title="Lekce 12 - Display list">12</a></li>
<li class="li_tut"><a href="tut_13.php" title="Lekce 13 - Bitmapové fonty">13</a></li>
<li class="li_tut"><a href="tut_14.php" title="Lekce 14 - Outline fonty">14</a></li>
<li class="li_tut"><a href="tut_15.php" title="Lekce 15 - Mapování textur na fonty">15</a></li>
<li class="li_tut"><a href="tut_16.php" title="Lekce 16 - Mlha">16</a></li>
<li class="li_tut"><a href="tut_17.php" title="Lekce 17 - 2D fonty z textur">17</a></li>
<li class="li_tut"><a href="tut_18.php" title="Lekce 18 - Kvadriky">18</a></li>
<li class="li_tut"><a href="tut_19.php" title="Lekce 19 - Èásticové systémy">19</a></li>
<li class="li_tut"><a href="tut_20.php" title="Lekce 20 - Maskování">20</a></li>
<li class="li_tut"><a href="tut_21.php" title="Lekce 21 - Pøímky, antialiasing, èasování, pravoúhlá projekce, základní zvuky a jednoduchá herní logika">21</a></li>
<li class="li_tut"><a href="tut_22.php" title="Lekce 22 - Bump Mapping &amp; Multi Texturing">22</a></li>
<li class="li_tut"><a href="tut_23.php" title="Lekce 23 - Mapování textur na kulové kvadriky">23</a></li>
<li class="li_tut"><a href="tut_24.php" title="Lekce 24 - Výpis OpenGL roz¹íøení, oøezávací testy a textury z TGA obrázkù">24</a></li>
<li class="li_tut"><a href="tut_25.php" title="Lekce 25 - Morfování objektù a jejich nahrávání z textového souboru">25</a></li>
<li class="li_tut"><a href="tut_26.php" title="Lekce 26 - Odrazy a jejich oøezávání za pou¾ití stencil bufferu">26</a></li>
<li class="li_tut"><a href="tut_27.php" title="Lekce 27 - Stíny">27</a></li>
<li class="li_tut"><a href="tut_28.php" title="Lekce 28 - Bezierovy køivky a povrchy, fullscreen fix">28</a></li>
<li class="li_tut"><a href="tut_29.php" title="Lekce 29 - Blitter, nahrávání .RAW textur">29</a></li>
<li class="li_tut"><a href="tut_30.php" title="Lekce 30 - Detekce kolizí">30</a></li>
<li class="li_tut"><a href="tut_31.php" title="Lekce 31 - Nahrávání a renderování modelù">31</a></li>
<li class="li_tut"><a href="tut_32.php" title="Lekce 32 - Picking, alfa blending, alfa testing, sorting">32</a></li>
<li class="li_tut"><a href="tut_33.php" title="Lekce 33 - Nahrávání komprimovaných i nekomprimovaných obrázkù TGA">33</a></li>
<li class="li_tut"><a href="tut_34.php" title="Lekce 34 - Generování terénù a krajin za pou¾ití vý¹kového mapování textur">34</a></li>
<li class="li_tut"><a href="tut_35.php" title="Lekce 35 - Pøehrávání videa ve formátu AVI">35</a></li>
<li class="li_tut"><a href="tut_36.php" title="Lekce 36 - Radial Blur, renderování do textury">36</a></li>
<li class="li_tut"><a href="tut_37.php" title="Lekce 37 - Cel-Shading">37</a></li>
<li class="li_tut"><a href="tut_38.php" title="Lekce 38 - Nahrávání textur z resource souboru &amp; texturování trojúhelníkù">38</a></li>
<li class="li_tut"><a href="tut_39.php" title="Lekce 39 - Úvod do fyzikálních simulací">39</a></li>
<li class="li_tut"><a href="tut_40.php" title="Lekce 40 - Fyzikální simulace lana">40</a></li>
<li class="li_tut"><a href="tut_41.php" title="Lekce 41 - Volumetrická mlha a nahrávání obrázkù pomocí IPicture">41</a></li>
<li class="li_tut"><a href="tut_42.php" title="Lekce 42 - Více viewportù">42</a></li>
<li class="li_tut"><a href="tut_43.php" title="Lekce 43 - FreeType Fonty v OpenGL">43</a></li>
<li class="li_tut"><a href="tut_44.php" title="Lekce 44 - Èoèkové efekty">44</a></li>
<li class="li_tut"><a href="tut_45.php" title="Lekce 45 - Vertex Buffer Object (VBO)">45</a></li>
<li class="li_tut"><a href="tut_46.php" title="Lekce 46 - Fullscreenový antialiasing">46</a></li>
<li class="li_tut"><a href="tut_47.php" title="Lekce 47 - CG vertex shader">47</a></li>
<li class="li_tut"><a href="tut_48.php" title="Lekce 48 - ArcBall rotace">48</a></li>
</ul>

</div>
</div>
<!-- Pravý sloupec (konec) -->

<!-- Vlastní obsah stránky -->
<div class="stred">

<!--[if IE ]>
<div style="text-align: center;">
<a href="http://firefox.czilla.cz/"><img alt="Mozilla Firefox: Objevte znovu web" title="Mozilla Firefox: Objevte znovu web" style="border:none; width:468px;height:60px" src="http://firefox.czilla.cz/img/p/cz-ff-468x60-w-objevte.png" /></a>
</div>
<![endif]-->

<img src="images/nehe_tut/tut_19.jpg" class="nehe_maly" alt="Lekce 19" />

<h1>Lekce 19 - Èásticové systémy</h1>

<p class="nadpis_clanku">Chtìli jste u¾ nìkdy naprogramovat exploze, vodní fontány, planoucí hvìzdy a jiné skvìlé efekty, nicménì kódování èásticových systémù bylo buï pøíli¹ tì¾ké nebo jste vùbec nevìdìli, jak na to? V této lekci zjistíte, jak vytvoøit jednoduchý, ale dobøe vypadající èásticový systém. Extra pøidáme duhové barvy a ovládání klávesnicí. Také se dozvíte, jak pomocí triangle stripu jednodu¹e vykreslovat velké mno¾ství trojúhelníkù.</p>

<p>V této lekci vytvoøíme témìø komplexní èásticový systém. Jakmile jednou pochopíte, jak pracují zvládnete cokoli.</p>

<p>Pøedem upozoròuji, ¾e dodne¹ka jsem nikdy nic podobného vytváøel. V¾dy jsem si myslel, ¾e ty slavné a "komerèní" èásticové systémy jsou hodnì komplexním kusem kódu.</p>

<p>Mo¾ná nebudete vìøit, kdy¾ pí¹i, ¾e tento kód je 100% pùvodní. Nemìl jsem pøed sebou ¾ádné technické dokumentace. Onehdy jsem prostì pøemý¹lel a náhle se mi v hlavì vygenerovala spousta nápadù. Namísto uva¾ování o èástici jako o pixelu pøesunujícím se z bodu A do bodu B a dìlajícím to èi ono jsem ka¾dé pøiøadil vlastní objekt (strukturu) reagující na prostøedí kolem. Zapouzdøuje ¾ivot, stárnutí, barvu, rychlost, gravitaèní závislosti a dal¹í vlastnosti.</p>

<p>Tak¾e aèkoli program, podle mì, vypadá perfektnì a pracuje pøesnì, jak jsem chtìl, mo¾ná není tou správnou cestou k vytváøení èásticových systémù. Osobnì jsem se nestaral, jak dobøe pracuje, ale ve svých projektech jsem ho mohl bez problémù pou¾ívat. Jestli¾e jste typem lidí, "¹»ouralù", kteøí potøebují poznat správnou cestu, zkuste strávit hodiny prohledáváním internetu. Toto bylo varování.</p>

<p>Pou¾ijeme kód z lekce 1. Symbolická konstanta definuje poèet vytváøených èástic. Rainbow zapíná/vypíná cyklování mezi duhovými barvami. Sp a rp pøedcházejí opakování kódu pøi del¹ím stisku mezerníku a enteru.</p>

<p class="src0">#include &lt;windows.h&gt;<span class="kom">// Hlavièkový soubor pro Windows</span></p>
<p class="src0">#include &lt;stdio.h&gt;<span class="kom">// Hlavièkový soubor pro standardní vstup/výstup</span></p>
<p class="src0">#include &lt;gl\gl.h&gt;<span class="kom">// Hlavièkový soubor pro OpenGL32 knihovnu</span></p>
<p class="src0">#include &lt;gl\glu.h&gt;<span class="kom">// Hlavièkový soubor pro Glu32 knihovnu</span></p>
<p class="src0">#include &lt;gl\glaux.h&gt;<span class="kom">// Hlavièkový soubor pro Glaux knihovnu</span></p>
<p></p>
<p class="src0">#define MAX_PARTICLES 1000<span class="kom">// Poèet vytváøených èástic</span></p>
<p></p>
<p class="src0">HDC hDC = NULL;<span class="kom">// Privátní GDI Device Context</span></p>
<p class="src0">HGLRC hRC = NULL;<span class="kom">// Trvalý Rendering Context</span></p>
<p class="src0">HWND hWnd = NULL;<span class="kom">// Obsahuje Handle na¹eho okna</span></p>
<p class="src0">HINSTANCE hInstance;<span class="kom">// Obsahuje instanci aplikace</span></p>
<p></p>
<p class="src0">bool keys[256];<span class="kom">// Pole pro ukládání vstupu z klávesnice</span></p>
<p class="src0">bool active = TRUE;<span class="kom">// Ponese informaci o tom, zda je okno aktivní</span></p>
<p class="src0">bool fullscreen = TRUE;<span class="kom">// Ponese informaci o tom, zda je program ve fullscreenu</span></p>
<p></p>
<p class="src0">bool rainbow = true;<span class="kom">// Duhový efekt?</span></p>
<p class="src0">bool sp;<span class="kom">// Stisknutý mezerník?</span></p>
<p class="src0">bool rp;<span class="kom">// Stisknutý enter?</span></p>

<p>Následují pomocné promìnné. Slowdown kontroluje rychlost pohybu èástic (èím vy¹¹í èíslo, tím pomaleji se pohybují). Xspeed a yspeed ovlivòují rychlost na jednotlivých osách. Jsou pouze jedním faktorem implementovaným kvùli ovládání klávesnicí. Zoom pou¾íváme pro pøesun do/ze scény.</p>

<p class="src0">float slowdown=2.0f;<span class="kom">// Zpomalení èástic</span></p>
<p class="src0">float xspeed;<span class="kom">// Základní rychlost na ose x</span></p>
<p class="src0">float yspeed;<span class="kom">// Základní rychlost na ose y</span></p>
<p class="src0">float zoom=-40.0f;<span class="kom">// Zoom</span></p>

<p>Loop vyu¾íváme pøedev¹ím jako promìnnou cyklu, ve kterých inicializujeme a vykreslujeme èástice. Col vychází ze slova color a znaèí barvu. Pomocí èasovaèe delay pøi zapnutém duhovém módu cyklujeme mezi barvami.</p>

<p>Poslední promìnná je klasická textura. Rozhodl jsem se pro ni, proto¾e vypadají mnohem lépe ne¾ jednobarevné body. Také si mù¾ete vytvoøit texturu ohnì, snìhu, jakéhokoli objektu.</p>

<p class="src0">GLuint loop;<span class="kom">// Øídící promìnná cyklù</span></p>
<p class="src0">GLuint col;<span class="kom">// Vybraná barva</span></p>
<p class="src0">GLuint delay;<span class="kom">// Zpo¾dìní pro duhový efekt</span></p>
<p class="src0">GLuint texture[1];<span class="kom">// Ukládá texturu</span></p>

<p>Následuje struktura definující vlastnosti èástic. Obsahuje spoustu atributù, tak¾e si je popí¹eme. Pokud bude active rovno true èástice bude aktivní a false logicky znaèí neaktivnost. V tomto programu se tato vlastnost nepou¾ívá, ale nìkdy jindy by mohla být u¾iteèná. Life a fade definují, jak dlouho a jak jasnì bude èástice zobrazena. Od ¾ivota (life) budeme odeèítat stárnutí (fade). Na zaèátku je inicializujeme na random, stejnì jako témìø v¹echny ostatní vlastnosti.</p>

<p class="src0">typedef struct<span class="kom">// Vytvoøí stukturu pro èástici</span></p>
<p class="src0">{</p>
<p class="src1">bool active;<span class="kom">// Aktivní?</span></p>
<p class="src1">float life;<span class="kom">// ®ivot</span></p>
<p class="src1">float fade;<span class="kom">// Rychlost stárnutí</span></p>
<p></p>
<p class="src1">float r;<span class="kom">// Èervená slo¾ka barvy</span></p>
<p class="src1">float g;<span class="kom">// Zelená slo¾ka barvy</span></p>
<p class="src1">float b;<span class="kom">// Modrá slo¾ka barvy</span></p>
<p></p>
<p class="src1">float x;<span class="kom">// X Pozice</span></p>
<p class="src1">float y;<span class="kom">// Y Pozice</span></p>
<p class="src1">float z;<span class="kom">// Z Pozice</span></p>
<p></p>
<p class="src1">float xi;<span class="kom">// X smìr a rychlost</span></p>
<p class="src1">float yi;<span class="kom">// Y smìr a rychlost</span></p>
<p class="src1">float zi;<span class="kom">// Z smìr a rychlost</span></p>

<p>Následující promìnné urèují pùsobení gravitace (ka¾dá ve své ose). Kladná xg znaèí pùsobení doprava, záporná doleva. Smìry jsou analogické ke smìrùm souøadnicových os.</p>

<p class="src1">float xg;<span class="kom">// X gravitace</span></p>
<p class="src1">float yg;<span class="kom">// Y gravitace</span></p>
<p class="src1">float zg;<span class="kom">// Z gravitace</span></p>
<p></p>
<p class="src0">} particles;<span class="kom">// Struktura èástice</span></p>

<p>Dále deklarujeme pole datového typu particles (na¹e struktura) o velikosti MAX_PARTICLES a jménu particle.</p>

<p class="src0">particles particle[MAX_PARTICLES];<span class="kom">// Pole èástic</span></p>

<p>Inicializací pole barev si vytvoøíme barevnou paletu. Ka¾dá z dvanácti polo¾ek obsahuje 3 RGB slo¾ky v rozmezí od èervené do fialové.</p>

<p class="src0">static GLfloat colors[12][3]=<span class="kom">// Barevná paleta</span></p>
<p class="src0">{</p>
<p class="src1">{1.0f,0.5f,0.5f},{1.0f,0.75f,0.5f},{1.0f,1.0f,0.5f},{0.75f,1.0f,0.5f},</p>
<p class="src1">{0.5f,1.0f,0.5f},{0.5f,1.0f,0.75f},{0.5f,1.0f,1.0f},{0.5f,0.75f,1.0f},</p>
<p class="src1">{0.5f,0.5f,1.0f},{0.75f,0.5f,1.0f},{1.0f,0.5f,1.0f},{1.0f,0.5f,0.75f}</p>
<p class="src0">};</p>

<p>Do inicializaèního kódu jsem oproti kódu z první lekce pøidal loading textury, nastavení blendingu a zadání poèáteèních hodnot èástic.</p>

<p class="src0">int InitGL(GLvoid)<span class="kom">// V¹echna nastavení OpenGL</span></p>
<p class="src0">{</p>
<p class="src1">if (!LoadGLTextures())<span class="kom">// Nahraje textury</span></p>
<p class="src1">{</p>
<p class="src2">return FALSE;</p>
<p class="src1">}</p>
<p></p>
<p class="src1">glShadeModel(GL_SMOOTH);<span class="kom">// Povolíme jemné stínování</span></p>
<p class="src1">glClearColor(0.0f,0.0f,0.0f,0.0f);<span class="kom">// Èerné pozadí</span></p>
<p class="src1">glClearDepth(1.0f);<span class="kom">// Nastavení hloubkového bufferu</span></p>
<p class="src1">glDisable(GL_DEPTH_TEST);<span class="kom">// Vypne hloubkové testování</span></p>
<p class="src1">glEnable(GL_BLEND);<span class="kom">// Zapne blending</span></p>
<p class="src1">glBlendFunc(GL_SRC_ALPHA,GL_ONE);<span class="kom">// Typ blendingu</span></p>
<p class="src1">glHint(GL_PERSPECTIVE_CORRECTION_HINT,GL_NICEST);<span class="kom">// Perspektiva</span></p>
<p class="src1">glHint(GL_POINT_SMOOTH_HINT,GL_NICEST);<span class="kom">// Jemnost bodù</span></p>
<p class="src1">glEnable(GL_TEXTURE_2D);<span class="kom">// Zapne mapování textur</span></p>
<p class="src1">glBindTexture(GL_TEXTURE_2D,texture[0]);<span class="kom">// Vybere texturu</span></p>

<p>Inicializujeme jednotlivé èástice. Zaèneme aktivováním. Pamatujte si, ¾e naktivní nezobrazujeme a neaktualizujeme. Potom je o¾ivíme. Nebyl jsem si jistý, zda je zhasínání (zprùhledòování) èástic závislé na zkracování ¾ivota, správnou cestou. Nicménì pracuje skvìle, tak co :-) Maximální ¾ivot 1.0f dává nejjasnìj¹í vykreslení (viz. blending).</p>

<p class="src1">for (loop=0;loop&lt;MAX_PARTICLES;loop++)<span class="kom">// Inicializace èástic</span></p>
<p class="src1">{</p>
<p class="src2">particle[loop].active=true;<span class="kom">// Aktivace</span></p>
<p class="src2">particle[loop].life=1.0f;<span class="kom">// O¾ivení</span></p>

<p>Na randomovou hodnotu nastavíme rychlost stárnutí a postupného zhasínání. Ka¾dým vykreslením se ¾ivot (life) zkracuje o stárnutí (fade). Hodnotu 0 a¾ 99 vydìlíme 1000 a tím získáme velmi malé èíslo. Aby rychlost stárnutí nikdy nebyla nulová, pøièteme 0,003.</p>

<p class="src2">particle[loop].fade=float(rand()%100)/1000.0f+0.003f;<span class="kom">// Rychlost stárnutí</span></p>

<p>Nastavíme barvu èástic na nìkterou z vý¹e vytvoøené palety. Matematika je jednoduchá: vezmeme øídící promìnnou cyklu a vynásobíme ji podílem poètu barev s celkovým poètem èástic. Napøíklad pøi prvním prùchodu bude loop = 0, po dosazení a výpoètu získáme 0*(12/1000)=0. Pøi posledním prùchodu (loop = poèet èástic -1 = 999) vyjde 999*(12/1000)=11,988. Proto¾e pøedáváme int, výsledek se oøe¾e na 11, co¾ je poslední barva v paletì.</p>

<p class="src2">particle[loop].r=colors[loop*(12/MAX_PARTICLES)][0];<span class="kom">// Èervená</span></p>
<p class="src2">particle[loop].g=colors[loop*(12/MAX_PARTICLES)][1];<span class="kom">// Zelená</span></p>
<p class="src2">particle[loop].b=colors[loop*(12/MAX_PARTICLES)][2];<span class="kom">// Modrá</span></p>

<p>Inicializujeme smìr a rychlost pohybu èástic. Výpoèet provedeme opìt randomem, který pro poèáteèní efekt exploze násobíme deseti. Dostaneme kladná nebo záporná èísla urèující smìr a rychlost pohybu v jednotlivých osách.</p>

<p class="src2">particle[loop].xi=float((rand()%50)-26.0f)*10.0f;<span class="kom">// Rychlost a smìr pohybu na ose x</span></p>
<p class="src2">particle[loop].yi=float((rand()%50)-25.0f)*10.0f;<span class="kom">// Rychlost a smìr pohybu na ose y</span></p>
<p class="src2">particle[loop].zi=float((rand()%50)-25.0f)*10.0f;<span class="kom">// Rychlost a smìr pohybu na ose z</span></p>

<p>Nakonec nastavíme gravitaèní pùsobení. Vìt¹inou gravitace strhává vìci dolù, ale ta na¹e bude moci pùsobit v¹emi smìry. Na zaèátku ov¹em klasicky dolù (yg = - 0,8).</p>

<p class="src2">particle[loop].xg=0.0f;<span class="kom">// Gravitace na ose x</span></p>
<p class="src2">particle[loop].yg=-0.8f;<span class="kom">// Gravitace na ose y</span></p>
<p class="src2">particle[loop].zg=0.0f;<span class="kom">// Gravitace na ose z</span></p>
<p class="src1">}</p>
<p class="src1">return TRUE;</p>
<p class="src0">}</p>

<p>V dal¹í funkci se pokusíme o vykreslování, zajistíme pùsobení gravitace ap. Matici ModelView resetujeme pouze jednou a to na zaèátku. Pozici èástic tedy nebudeme urèovat slo¾itými posuny a rotacemi, ale pouze souøadnicemi pøedávanými funkci glVertex3f().</p>

<p class="src0">int DrawGLScene(GLvoid)<span class="kom">// Vykreslování</span></p>
<p class="src0">{</p>
<p class="src1">glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);<span class="kom">// Vyma¾e obrazovku a hloubkový buffer</span></p>
<p class="src1">glLoadIdentity();<span class="kom">// Reset matice</span></p>
<p class="src1"></p>
<p class="src1">for (loop=0;loop&lt;MAX_PARTICLES;loop++)<span class="kom">// Cyklus prochází ka¾dou èástici</span></p>
<p class="src1">{</p>

<p>První vìcí je zkontrolování, zda je èástice aktivní, pokud ne nebudeme ji aktualizovat ani vykreslovat. Nicménì v tomto programu budou aktivní v¹echny.</p>

<p class="src2">if (particle[loop].active)<span class="kom">// Pokud je èástice aktivní</span></p>
<p class="src2">{</p>

<p>Následující tøi promìnné x,y,z jsou spí¹e pomocné k zpøehlednìní kódu. V¹imnìte si, ¾e k pozici na ose z pøièítáme zoom, èím¾ mù¾eme jednodu¹e mìnit hloubku v obrazovce.</p>

<p class="src3">float x=particle[loop].x;<span class="kom">// x pozice</span></p>
<p class="src3">float y=particle[loop].y;<span class="kom">// y pozice</span></p>
<p class="src3">float z=particle[loop].z+zoom;<span class="kom">// z pozice + zoom</span></p>

<p>Dále obarvíme èástici její barvou. Jako alfa kanál (prùhlednost) s výhodou vyu¾ijeme ¾ivot, který nabývá hodnot od 1.0f (plný) do 0.0f (smrt). Postupným stárnutím se tedy stává prùhlednìj¹í a¾ vybledne docela.</p>

<p class="src3"><span class="kom">// Barva èástice</span></p>
<p class="src3">glColor4f(particle[loop].r,particle[loop].g,particle[loop].b,particle[loop].life);</p>

<p>Máme pozici i barvu, tak¾e pøejdeme k vykreslení. Pùvodnì jsem chtìl pou¾ít otexturovaný ètverec, ale pak jsem se rozhodl pro otexturovaný &quot;triangle strip&quot;. Vìt¹ina grafických karet renderuje trojúhelníky mnohem rychleji ne¾ ètverce, proto¾e se ètyøúhelníky èasto konvertují na dva trojúhelníky. K vykreslení klasickým zpùsobem bychom potøebovali 6 rùzných bodù, pou¾itím triangle stripu staèí pouze ètyøi. Nejprve tedy po¾ádáme OpenGL o vykreslení triangle stripu.</p>

<p class="src3">glBegin(GL_TRIANGLE_STRIP);<span class="kom">// Vytvoøí obdélník pomocí triangle stripu</span></p>

<p>Triangle strip vykresluje sérii trojúhelníkù u¾itím bodù V0, V1, V2, potom V2, v1, V3 (v¹imnìte si poøadí), dále V2, V3, V4 atd. Tímto poøadím se zajistí, ¾e se v¹echny vykreslí se stejnou orientací (viz. poøadí zadávání vrcholù), která je dùle¾itá u nìkterých operací, napø. cullingu. Aby se nìco vykreslilo musí být zadány alespoò tøi body. Pro pou¾ití triangle stripu existují dva dobré dùvody. První: po inicializaci prvního trojúhelníku staèí pro ka¾dý nový trojúhelník jenom jeden bod, který bude skombinován s body toho minulého. Druhý: odstranìním èásti kódu program pobì¾í rychleji. Zdrojový kód bude krat¹í a pøehlednìj¹í. Poèet vykreslených trojúhelníku vykreslených na monitor bude o dva men¹í ne¾ poèet zadaných bodù.</p>

<div class="okolo_img"><img src="images/nehe_tut/tut_19_1.gif" width="128" height="128" alt="triangle_strip" /></div>

<p class="src4">glTexCoord2d(1,1); glVertex3f(x+0.5f,y+0.5f,z);<span class="kom">// Horní pravý</span></p>
<p class="src4">glTexCoord2d(0,1); glVertex3f(x-0.5f,y+0.5f,z);<span class="kom">// Horní levý</span></p>
<p class="src4">glTexCoord2d(1,0); glVertex3f(x+0.5f,y-0.5f,z);<span class="kom">// Dolní pravý</span></p>
<p class="src4">glTexCoord2d(0,0); glVertex3f(x-0.5f,y-0.5f,z);<span class="kom">// Dolní levý</span></p>
<p></p>
<p class="src3">glEnd();<span class="kom">// Ukonèí triangle strip</span></p>

<p>Po vykreslení pøichází na øadu aktualizace èástice. Matematika mù¾e vypadat stra¹nì, ale je krásnì jednoduchá. Vezmeme pozici na konkrétní ose a pøièteme k ní pohyb na této ose vydìlený slowdown krát tisíc. Napø. pokud bude èástice uprostøed obrazovky (0,0,0), pohyb xi 10 a slowdown 1 pøesuneme ji o 10/(1*1000) - do bodu 0.01f na ose x. Pokud bychom inkrementovali slowdown na 2 pøesuneme se pouze na 0.005f. Toto je také dùvod násobení startovní hodnoty desítkou. Body se po spu¹tìní programu pohybují mnohem rychleji, tak¾e vytvoøí dojem exploze.</p>

<p class="src3">particle[loop].x+=particle[loop].xi/(slowdown*1000);<span class="kom">// Pohyb na ose x</span></p>
<p class="src3">particle[loop].y+=particle[loop].yi/(slowdown*1000);<span class="kom">// Pohyb na ose y</span></p>
<p class="src3">particle[loop].z+=particle[loop].zi/(slowdown*1000);<span class="kom">// Pohyb na ose z</span></p>

<p>Po spoèítání pohybu aplikujeme gravitaèní pùsobení. Docílíme toho pøiètením "gravitaèní síly" k rychlosti pohybu. Øeknìme, ¾e rychlost pohybu je 10 a gravitace o velikosti 1 pùsobí v opaèném smìru. Ka¾dým pøekreslením se rychlost pohybu dekrementováním zpomalí. Po deseti pøekresleních èástice zmìní smìr.</p>

<p class="src3">particle[loop].xi+=particle[loop].xg;<span class="kom">// Gravitaèní pùsobení na ose x</span></p>
<p class="src3">particle[loop].yi+=particle[loop].yg;<span class="kom">// Gravitaèní pùsobení na ose y</span></p>
<p class="src3">particle[loop].zi+=particle[loop].zg;<span class="kom">// Gravitaèní pùsobení na ose z</span></p>

<p>Sní¾íme hodnotu ¾ivota o stárnutí. Kdybychom toto nedìlali nikdy by èástice neshoøela. Ka¾dá má nastavenu jinou rychlost stárnutí, tudí¾ nezemøou ve stejný èasový okam¾ik.</p>

<p class="src3">particle[loop].life-=particle[loop].fade;<span class="kom">// Sní¾í ¾ivot o stárnutí</span></p>

<p>V této chvíli musíme otestovat, zda je po zestárnutí stále na¾ivu.</p>

<p class="src3">if (particle[loop].life&lt;0.0f)<span class="kom">// Pokud zemøela</span></p>
<p class="src3">{</p>

<p>Pokud zemøela &quot;reinkarnujeme&quot; ji nastavením plného ¾ivota a nové náhodné rychlosti stárnutí.</p>

<p class="src4">particle[loop].life=1.0f;<span class="kom">// Nový ¾ivot</span></p>
<p class="src4">particle[loop].fade=float(rand()%100)/1000.0f+0.003f;<span class="kom">// Náhodné stárnutí</span></p>

<p>Resetujeme její pozici na støed obrazovky.</p>

<p class="src4">particle[loop].x=0.0f;<span class="kom">// Vycentrování doprostøed obrazovky</span></p>
<p class="src4">particle[loop].y=0.0f;<span class="kom">// Vycentrování doprostøed obrazovky</span></p>
<p class="src4">particle[loop].z=0.0f;<span class="kom">// Vycentrování doprostøed obrazovky</span></p>

<p>Urèíme novou rychlost a vlastnì i smìr. V¹imnìte si, ¾e jsem zvìt¹il maximální a minimální rychlost z 50 na 60 oproti funkci InitGL(), ale tentokrát výsledek nenásobím deseti. U¾ nechceme ¾ádné exploze, ale pomalej¹í pohyb. Z dùvodu ovládání klávesnicí pøièítáme k hodnotì i globální rychlost (xspeed, yspeed).</p>

<p class="src4">particle[loop].xi=xspeed+float((rand()%60)-32.0f);<span class="kom">// Nová rychlost a smìr</span></p>
<p class="src4">particle[loop].yi=yspeed+float((rand()%60)-30.0f);<span class="kom">// Nová rychlost a smìr</span></p>
<p class="src4">particle[loop].zi=float((rand()%60)-30.0f);<span class="kom">// Nová rychlost a smìr</span></p>

<p>Èástici pøiøadíme také novou barvu. Promìnná col ukládá èíslo 0 a¾ 11 (12 barev). Pomocí ní vybíráme èervenou, zelenou a modrou intenzitu z palety vytvoøené na zaèátku programu.</p>

<p class="src4">particle[loop].r=colors[col][0];<span class="kom">// Vybere barvu z palety</span></p>
<p class="src4">particle[loop].g=colors[col][1];<span class="kom">// Vybere barvu z palety</span></p>
<p class="src4">particle[loop].b=colors[col][2];<span class="kom">// Vybere barvu z palety</span></p>
<p class="src3">}</p>

<p>Následující kód aktualizuje pùsobení gravitace. Stisknutím 8 na klávesnici zvìt¹íme yg (y gravitaci) a èástice bude ta¾ena vzhùru. Tato testování jsou vlo¾ena do vykreslování z dùvodu zjednodu¹ení. Kdyby bylo umístìno nìkam jinam museli bychom vytvoøit nový cyklus dìlající úplnì stejnou práci. Podobné postupy poskytují skvìlé mo¾nosti. Napø. se mù¾ete pokusíte o proud vody vìtrem vystøikující pøímo vzhùru. Pøidáním gravitace pùsobící dolù vytvoøíte fontánu vody.</p>

<p class="src3"><span class="kom">// Pokud je stisknuta 8 a y gravitace je men¹í ne¾ 1.5</span></p>
<p class="src3">if (keys[VK_NUMPAD8] &amp;&amp; (particle[loop].yg&lt;1.5f)) particle[loop].yg+=0.01f;</p>

<p class="src3"><span class="kom">// Pokud je stisknuta 2 a y gravitace je men¹í ne¾ -1.5</span></p>
<p class="src3">if (keys[VK_NUMPAD2] &amp;&amp; (particle[loop].yg&gt;-1.5f)) particle[loop].yg-=0.01f;</p>
<p class="src3"><span class="kom">// Pokud je stisknuta 6 a x gravitace je men¹í ne¾ 1.5</span></p>
<p class="src3">if (keys[VK_NUMPAD6] &amp;&amp; (particle[loop].xg&lt;1.5f)) particle[loop].xg+=0.01f;</p>
<p class="src3"><span class="kom">// Pokud je stisknuta 4 a x gravitace je men¹í ne¾ -1.5</span></p>
<p class="src3">if (keys[VK_NUMPAD4] &amp;&amp; (particle[loop].xg&gt;-1.5f)) particle[loop].xg-=0.01f;</p>

<p>Pro radost pøipí¹eme malou "vychytávku". Mùj bratr si myslel, ¾e úvodní výbuch je skvìlý efekt. Stisknutím klávesy TAB se v¹echny èástice resetují do centra obrazovky. Rychlost se vynásobí deseti a tím vytvoøí explozi.</p>

<p class="src3">if (keys[VK_TAB])<span class="kom">// Zpùsobí výbuch</span></p>
<p class="src3">{</p>
<p class="src4">particle[loop].x=0.0f;<span class="kom">// Vycentrování na støed obrazovky</span></p>
<p class="src4">particle[loop].y=0.0f;<span class="kom">// Vycentrování na støed obrazovky</span></p>
<p class="src4">particle[loop].z=0.0f;<span class="kom">// Vycentrování na støed obrazovky</span></p>
<p class="src4">particle[loop].xi=float((rand()%50)-26.0f)*10.0f;<span class="kom">// Náhodná rychlost</span></p>
<p class="src4">particle[loop].yi=float((rand()%50)-25.0f)*10.0f;<span class="kom">// Náhodná rychlost</span></p>
<p class="src4">particle[loop].zi=float((rand()%50)-25.0f)*10.0f;<span class="kom">// Náhodná rychlost</span></p>
<p class="src3">}</p>
<p class="src2">}</p>
<p class="src1">}</p>
<p class="src1">return TRUE;<span class="kom">// V¹echno OK</span></p>
<p class="src0">}</p>

<p>Funkci WinMain napí¹i celou, proto¾e je v ní celkem dost zmìn.</p>

<p class="src0">int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)</p>
<p class="src0">{</p>
<p class="src1">MSG msg;</p>
<p class="src1">BOOL done=FALSE;</p>
<p></p>
<p class="src1">if (MessageBox(NULL,&quot;Would You Like To Run In Fullscreen Mode?&quot;, &quot;Start FullScreen?&quot;, MB_YESNO|MB_ICONQUESTION) == IDNO)</p>
<p class="src1">{</p>
<p class="src2">fullscreen=FALSE;</p>
<p class="src1">}</p>
<p></p>
<p class="src1">if (!CreateGLWindow(&quot;NeHe's Particle Tutorial&quot;,640,480,16,fullscreen))</p>
<p class="src1">{</p>
<p class="src2">return 0;</p>
<p class="src1">}</p>

<p>Toto je první dùle¾itá zmìna. Pøi rozhodnutí u¾ivatele pou¾ít fullscreen zmìníme slowdown ze 2.0f na 1.0f. Tato úprava není a¾ tak dùle¾itá - lze ji vypustit. Slou¾í k urychlení fullscreenu - moje grafická karta pracuje v oknì trochu rychleji. Nevím proè.</p>

<p class="src1">if (fullscreen)</p>
<p class="src1">{</p>
<p class="src2">slowdown=1.0f;</p>
<p class="src1">}</p>
<p></p>
<p class="src1">while(!done)</p>
<p class="src1">{</p>
<p class="src2">if (PeekMessage(&amp;msg,NULL,0,0,PM_REMOVE))</p>
<p class="src2">{</p>
<p class="src3">if (msg.message==WM_QUIT)</p>
<p class="src3">{</p>
<p class="src4">done=TRUE;</p>
<p class="src3">}</p>
<p class="src3">else</p>
<p class="src3">{</p>
<p class="src4">TranslateMessage(&amp;msg);</p>
<p class="src4">DispatchMessage(&amp;msg);</p>
<p class="src3">}</p>
<p class="src2">}</p>
<p class="src2">else</p>
<p class="src2">{</p>
<p class="src3">if ((active &amp;&amp; !DrawGLScene()) || keys[VK_ESCAPE])</p>
<p class="src3">{</p>
<p class="src4">done=TRUE;</p>
<p class="src3">}</p>
<p class="src3">else</p>
<p class="src3">{</p>
<p class="src4">DrawGLScene();</p>
<p class="src4">SwapBuffers(hDC);</p>

<p>O¹etøíme vstup z klávesnice (+, -, PageUp, PageDown)</p>

<p class="src4">if (keys[VK_ADD] &amp;&amp; (slowdown&gt;1.0f)) slowdown-=0.01f;<span class="kom">// Urychlení èástic</span></p>
<p class="src4">if (keys[VK_SUBTRACT] &amp;&amp; (slowdown&lt;4.0f)) slowdown+=0.01f;<span class="kom">// Zpomalení èástic</span></p>
<p class="src4">if (keys[VK_PRIOR])zoom+=0.1f;<span class="kom">// Pøiblí¾ení pohledu</span></p>
<p class="src4">if (keys[VK_NEXT])zoom-=0.1f;<span class="kom">// Oddálení pohledu</span></p>

<p>V následujících øádcích testujeme stisk enteru, abychom zapnuli cyklování barvami.</p>

<p class="src4">if (keys[VK_RETURN] &amp;&amp; !rp)<span class="kom">// Stisk enteru</span></p>
<p class="src4">{</p>
<p class="src5">rp=true;<span class="kom">// Nastaví pøíznak</span></p>
<p class="src5">rainbow = !rainbow;<span class="kom">// Zapne/vypne duhový efekt</span></p>
<p class="src4">}</p>
<p></p>
<p class="src4">if (!keys[VK_RETURN]) rp=false;<span class="kom">// Po uvolnìní vypne pøíznak</span></p>

<p>Operace pøi tisku mezerníku mohou být trochu matoucí. Stejnì jako pøi enteru otestujeme, zda je zapnut duhový efekt. Pokud je, podíváme e jestli je hodnota poèítadla counter vìt¹í ne¾ 25. Pou¾ívá se ke zmìnì barvy celých skupin èástic. Pokud by se zmìnila barva pøi ka¾dém framu v¹echny èástice by se obarvily jinak. Vytvoøením zpo¾dìní stihneme obarvit stejnou barvou více èástic.</p>

<p class="src4">if ((keys[' '] &amp;&amp; !sp) || (rainbow &amp;&amp; (delay&gt;25)))<span class="kom">// Mezerník nebo duhový efekt</span></p>
<p class="src4">{</p>

<p>Pokud je stisknut mezerník vypne se duhový efekt. Kdybychom ho nedeaktivovali, tak by se dokola mìnily barvy dokud by nebyl stisknut enter. Dává smysl, ¾e pokud èlovìk bouchá do mezerníku namísto do enteru, tak chce barvami procházet sám.</p>

<p class="src5">if (keys[' '])rainbow=false;<span class="kom">// Pokud je stisknut vypne se duhový mód</span></p>

<p>Pokud je mezerník stisknut nebo je zapnut duhový mód a zpo¾dìní je vìt¹í ne¾ 25, pøiøazením true do sp oznámíme poèítaèi, ¾e byl stisknut. Poté nastavíme delay na nulu, tak¾e se mù¾e znovu poèítat do 25. Nakonec inkrementujeme barvu na dal¹í v paletì.</p>

<p class="src5">sp=true;<span class="kom">// Oznámí programu, ¾e byl stisknut mezerník</span></p>
<p class="src5">delay=0;<span class="kom">// Resetuje zpo¾dìní duhových barev</span></p>
<p class="src5">col++;<span class="kom">// Zmìní barvu èástice</span></p>

<p>Proto¾e máme pouze 12 barev musíme zamezit pøeteèení pole a následné zhroucení programu.</p>

<p class="src5">if (col&gt;11) col=0;<span class="kom">// Proti pøeteèení pole</span></p>
<p class="src4">}</p>
<p></p>
<p class="src4">if (!keys[' ']) sp=false;<span class="kom">// Uvolnìní mezerníku</span></p>

<p>Definujeme ovládání èástic. Na zaèátku programu jsme deklarovali dvì promìnné rychlosti (xspeed, yspeed). Kdy¾ èástice vyhoøí (zemøe) pøiøadíme jí novou rychlost závisející na tìchto promìnných. Mù¾eme ovlivòovat jejich smìr. Øádek dole testuje stisk ¹ipky nahoru. V takovém pøípadì yspeed inkrementujeme. Èástice se bude pohybovat nahoru. Max rychlost je omezena na 200, vìt¹í u¾ nevypadá dobøe. Analogickým principem pracuje i ovládání ostatními ¹ipkami.</p>

<p class="src4">if (keys[VK_UP] &amp;&amp; (yspeed&lt;200)) yspeed+=1.0f;<span class="kom">// ©ipka nahoru</span></p>
<p class="src4">if (keys[VK_DOWN] &amp;&amp; (yspeed&gt;-200)) yspeed-=1.0f;<span class="kom">// ©ipka dolù</span></p>
<p class="src4">if (keys[VK_RIGHT] &amp;&amp; (xspeed&lt;200)) xspeed+=1.0f;<span class="kom">// ©ipka doprava</span></p>
<p class="src4">if (keys[VK_LEFT] &amp;&amp; (xspeed&gt;-200)) xspeed-=1.0f;<span class="kom">// ©ipka doleva</span></p>

<p>Zbývá inkrementovat zpo¾dìní delay, pou¾ité pro rychlost zmìn barev. Ostatní kód znáte z minulých lekcí.</p>

<p class="src4">delay++;<span class="kom">// Inkrementace zpo¾dìní duhového efektu</span></p>
<p></p>
<p class="src4">if (keys[VK_F1])</p>
<p class="src4">{</p>
<p class="src5">keys[VK_F1]=FALSE;</p>
<p class="src5">KillGLWindow();</p>
<p class="src5">fullscreen = !fullscreen;</p>
<p class="src5">if (!CreateGLWindow(&quot;NeHe's Particle Tutorial&quot;,640,480,16,fullscreen))</p>
<p class="src5">{</p>
<p class="src6">return 0;</p>
<p class="src5">}</p>
<p class="src4">}</p>
<p class="src3">}</p>
<p class="src2">}</p>
<p class="src1">}</p>
<p></p>
<p class="src1">KillGLWindow();</p>
<p class="src1">return (msg.wParam);</p>
<p class="src0">}</p>

<p>V této lekci jsem se pokou¹el o vysvìtlení jednoduchého, ale pùsobivého èásticového systému. Jeho nejvýhodnìj¹í pou¾ití spoèívá ve vytvoøení efektù typu ohnì, vody, snìhu, explozí, hvìzd a spousty dal¹ích. Jednoduchým modifikováním kódu lze snadno naprogramovat zcela nový efekt.</p>

<p>Dìkuji Richardu Nutmanovi za upozornìní, ¾e by bylo výhodnìj¹í umis»ovat èástice pou¾itím glVertex3f() namísto resetováním matice a slo¾itými translacemi. Obì metody vypadají stejnì, ale jeho verze sni¾uje zatí¾ení poèítaèe. Program bì¾í rychleji.</p>

<p class="autor">napsal: Jeff Molofee - NeHe <span class="transform_email">&lt;nehe (zavináè) connect.ab.ca&gt;</span><br />
pøelo¾il: Michal Turek - Woq <span class="transform_email">&lt;WOQ (zavináè) seznam.cz&gt;</span></p>

<h3 class="zdroj_kody_nadpis">Zdrojové kódy</h3>

<ul class="zdroj_kody">
<li><a href="http://nehe.gamedev.net/data/lessons/vc/lesson19.zip">Visual C++</a> kód této lekce.</li>
<li><a href="http://nehe.gamedev.net/data/lessons/bcb6/lesson19_bcb6.zip">Borland C++ Builder 6</a> kód této lekce. ( <a href="mailto:christian@tugzip.com">Christian Kindahl</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/c_sharp/lesson19.zip">C#</a> kód této lekce. ( <a href="mailto:bholley@unlnotes.unl.edu">Brian Holley</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/cwarrior/lesson19.zip">Code Warrior 5.3</a> kód této lekce. ( <a href="mailto:DelusionalBeing@hotmail.com">Scott Lupton</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/cygwin/lesson19.tar.gz">Cygwin</a> kód této lekce. ( <a href="mailto:stephan@lazyfellow.com">Stephan Ferraro</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/delphi/lesson19.zip">Delphi</a> kód této lekce. ( <a href="mailto:marca@stack.nl">Marc Aarts</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/devc/lesson19.zip">Dev C++</a> kód této lekce. ( <a href="mailto:danprogram@hotmail.com">Dan</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/euphoria/lesson19.zip">Euphoria</a> kód této lekce. ( <a href="mailto:1evan@sbcglobal.net">Evan Marshall</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/gameglut/lesson19.zip">Game GLUT</a> kód této lekce. ( <a href="mailto:milix_gr@hotmail.com">Milikas Anastasios</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/irix/lesson19.zip">Irix</a> kód této lekce. ( <a href="mailto:christop@fhw.gr">Dimitrios Christopoulos</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/java/lesson19.zip">Java</a> kód této lekce. ( <a href="mailto:jeff@consunet.com.au">Jeff Kirby</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/jedisdl/lesson19.zip">Jedi-SDL</a> kód této lekce. ( <a href="mailto:Dominique@SavageSoftware.com.au">Dominique Louis</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/lccwin32/lccwin32_lesson19.zip">LCC Win32</a> kód této lekce. ( <a href="mailto:rwishlaw@shaw.ca">Robert Wishlaw</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/linux/lesson19.tar.gz">Linux</a> kód této lekce. ( <a href="mailto:kjrockot@home.com">Ken Rockot</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/linuxglx/lesson19.tar.gz">Linux/GLX</a> kód této lekce. ( <a href="mailto:miqster@gmx.net">Mihael Vrbanec</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/linuxsdl/lesson19.tar.gz">Linux/SDL</a> kód této lekce. ( <a href="mailto:leggett@eecs.tulane.edu">Ti Leggett</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/mac/lesson19.sit">Mac OS</a> kód této lekce. ( <a href="mailto:OBorstad@Bowesnet.com">Owen Borstad</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/macosxcocoa/lesson19.zip">Mac OS X/Cocoa</a> kód této lekce. ( <a href="mailto:blb@pobox.com">Bryan Blackburn</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/masm/lesson19.zip">MASM</a> kód této lekce. ( <a href="mailto:chris.j84@free.fr">Christophe</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/openil/lesson19.zip">Visual C++ / OpenIL</a> kód této lekce. ( <a href="mailto:doomwiz@ticnet.com">Denton Woods</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/vb/lesson19.zip">Visual Basic</a> kód této lekce. ( <a href="mailto:fredo@studenten.net">Edo</a> )</li>
<li><a href="http://nehe.gamedev.net/data/lessons/vs_net/lesson19.zip">Visual Studio .NET</a> kód této lekce. ( <a href="mailto:ultimatezeus@hotmail.com">Grant James</a> )</li>
</ul>

<div class="okolo_img"><img src="images/nehe_tut/tut_19_big.jpg" class="nehe_velky" alt="Lekce 19" /></div>
<p class="okolni_lekce"><a href="tut_18.php">&lt;&lt;&lt; Lekce 18</a> | <a href="tut_20.php">Lekce 20 &gt;&gt;&gt;</a></p>


<div class="netisk">
<h3 class="d_nadpis">Diskuze ke èlánku</h3>

®ádné pøíspìvky...<form action="d_view.php" method="post" class="d_o_obsah">
<div class="okolo_img" style="margin-top: 20px;">
<input type="submit" name="vlozit_novy" id="vlozit_novy" value="Vlo¾it nový" class="tlacitko" />
<input type="hidden" name="f" id="f" value="tut_19.php" />
</div>
</form>
</div>
<!-- Informace o webu -->
<center><div id="informace">
<img src="images/my/woq.gif" width="60" height="60" align="left" alt="Woq logo" />
<div style="margin-left: 70px">
<div><strong>CZ NeHe OpenGL, v¹e o programování 3D grafiky</strong></div>
<div>Copyright &copy; 2002-2007 Michal Turek <span class="transform_email">&lt;WOQ (zavináè) seznam.cz&gt;</span></div>
<div style="margin-top: 5px">Komerèní publikování v ti¹tìné, elektronické nebo jiné podobì je bez výslovného souhlasu zakázáno. Redistribuce pro výukové úèely nebo osobní pou¾ití je v¹ak povolena.</div>
</div>
</div></center>
<!-- Informace o webu (konec) -->

</div>
<!-- Vlastní obsah stránky (konec) -->

<script src="http://c1.navrcholu.cz/code?site=56575;t=b14"
type="text/javascript"></script><noscript><div><a
href="http://navrcholu.cz/"><img
src="http://c1.navrcholu.cz/hit?site=56575;t=b14;ref=;jss=0"
width="14" height="14" alt="NAVRCHOLU.cz"
style="border:none" /></a></div></noscript>

</body>
</html>
